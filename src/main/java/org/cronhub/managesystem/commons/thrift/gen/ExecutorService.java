package org.cronhub.managesystem.commons.thrift.gen;
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExecutorService {

  public interface Iface {

    public ExecuteDoneReportResult executeCmd(String cmd, long task_id, boolean undoReportHttp, String undoReportHttpUrl, int exec_type, boolean delTempFile, Extra extra) throws org.apache.thrift.TException;

    public boolean ping() throws org.apache.thrift.TException;

    public String update(String updateShellCmd) throws org.apache.thrift.TException;

    public String getProjectFolderPath() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void executeCmd(String cmd, long task_id, boolean undoReportHttp, String undoReportHttpUrl, int exec_type, boolean delTempFile, Extra extra, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.executeCmd_call> resultHandler) throws org.apache.thrift.TException;

    public void ping(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.thrift.TException;

    public void update(String updateShellCmd, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.update_call> resultHandler) throws org.apache.thrift.TException;

    public void getProjectFolderPath(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProjectFolderPath_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ExecuteDoneReportResult executeCmd(String cmd, long task_id, boolean undoReportHttp, String undoReportHttpUrl, int exec_type, boolean delTempFile, Extra extra) throws org.apache.thrift.TException
    {
      send_executeCmd(cmd, task_id, undoReportHttp, undoReportHttpUrl, exec_type, delTempFile, extra);
      return recv_executeCmd();
    }

    public void send_executeCmd(String cmd, long task_id, boolean undoReportHttp, String undoReportHttpUrl, int exec_type, boolean delTempFile, Extra extra) throws org.apache.thrift.TException
    {
      executeCmd_args args = new executeCmd_args();
      args.setCmd(cmd);
      args.setTask_id(task_id);
      args.setUndoReportHttp(undoReportHttp);
      args.setUndoReportHttpUrl(undoReportHttpUrl);
      args.setExec_type(exec_type);
      args.setDelTempFile(delTempFile);
      args.setExtra(extra);
      sendBase("executeCmd", args);
    }

    public ExecuteDoneReportResult recv_executeCmd() throws org.apache.thrift.TException
    {
      executeCmd_result result = new executeCmd_result();
      receiveBase(result, "executeCmd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeCmd failed: unknown result");
    }

    public boolean ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public boolean recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public String update(String updateShellCmd) throws org.apache.thrift.TException
    {
      send_update(updateShellCmd);
      return recv_update();
    }

    public void send_update(String updateShellCmd) throws org.apache.thrift.TException
    {
      update_args args = new update_args();
      args.setUpdateShellCmd(updateShellCmd);
      sendBase("update", args);
    }

    public String recv_update() throws org.apache.thrift.TException
    {
      update_result result = new update_result();
      receiveBase(result, "update");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update failed: unknown result");
    }

    public String getProjectFolderPath() throws org.apache.thrift.TException
    {
      send_getProjectFolderPath();
      return recv_getProjectFolderPath();
    }

    public void send_getProjectFolderPath() throws org.apache.thrift.TException
    {
      getProjectFolderPath_args args = new getProjectFolderPath_args();
      sendBase("getProjectFolderPath", args);
    }

    public String recv_getProjectFolderPath() throws org.apache.thrift.TException
    {
      getProjectFolderPath_result result = new getProjectFolderPath_result();
      receiveBase(result, "getProjectFolderPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProjectFolderPath failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void executeCmd(String cmd, long task_id, boolean undoReportHttp, String undoReportHttpUrl, int exec_type, boolean delTempFile, Extra extra, org.apache.thrift.async.AsyncMethodCallback<executeCmd_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeCmd_call method_call = new executeCmd_call(cmd, task_id, undoReportHttp, undoReportHttpUrl, exec_type, delTempFile, extra, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeCmd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cmd;
      private long task_id;
      private boolean undoReportHttp;
      private String undoReportHttpUrl;
      private int exec_type;
      private boolean delTempFile;
      private Extra extra;
      public executeCmd_call(String cmd, long task_id, boolean undoReportHttp, String undoReportHttpUrl, int exec_type, boolean delTempFile, Extra extra, org.apache.thrift.async.AsyncMethodCallback<executeCmd_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cmd = cmd;
        this.task_id = task_id;
        this.undoReportHttp = undoReportHttp;
        this.undoReportHttpUrl = undoReportHttpUrl;
        this.exec_type = exec_type;
        this.delTempFile = delTempFile;
        this.extra = extra;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeCmd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeCmd_args args = new executeCmd_args();
        args.setCmd(cmd);
        args.setTask_id(task_id);
        args.setUndoReportHttp(undoReportHttp);
        args.setUndoReportHttpUrl(undoReportHttpUrl);
        args.setExec_type(exec_type);
        args.setDelTempFile(delTempFile);
        args.setExtra(extra);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExecuteDoneReportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeCmd();
      }
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void update(String updateShellCmd, org.apache.thrift.async.AsyncMethodCallback<update_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_call method_call = new update_call(updateShellCmd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String updateShellCmd;
      public update_call(String updateShellCmd, org.apache.thrift.async.AsyncMethodCallback<update_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.updateShellCmd = updateShellCmd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_args args = new update_args();
        args.setUpdateShellCmd(updateShellCmd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update();
      }
    }

    public void getProjectFolderPath(org.apache.thrift.async.AsyncMethodCallback<getProjectFolderPath_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProjectFolderPath_call method_call = new getProjectFolderPath_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProjectFolderPath_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getProjectFolderPath_call(org.apache.thrift.async.AsyncMethodCallback<getProjectFolderPath_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProjectFolderPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProjectFolderPath_args args = new getProjectFolderPath_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProjectFolderPath();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("executeCmd", new executeCmd());
      processMap.put("ping", new ping());
      processMap.put("update", new update());
      processMap.put("getProjectFolderPath", new getProjectFolderPath());
      return processMap;
    }

    private static class executeCmd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeCmd_args> {
      public executeCmd() {
        super("executeCmd");
      }

      protected executeCmd_args getEmptyArgsInstance() {
        return new executeCmd_args();
      }

      protected executeCmd_result getResult(I iface, executeCmd_args args) throws org.apache.thrift.TException {
        executeCmd_result result = new executeCmd_result();
        result.success = iface.executeCmd(args.cmd, args.task_id, args.undoReportHttp, args.undoReportHttpUrl, args.exec_type, args.delTempFile, args.extra);
        return result;
      }
    }

    private static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      protected ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
      public update() {
        super("update");
      }

      protected update_args getEmptyArgsInstance() {
        return new update_args();
      }

      protected update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
        update_result result = new update_result();
        result.success = iface.update(args.updateShellCmd);
        return result;
      }
    }

    private static class getProjectFolderPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProjectFolderPath_args> {
      public getProjectFolderPath() {
        super("getProjectFolderPath");
      }

      protected getProjectFolderPath_args getEmptyArgsInstance() {
        return new getProjectFolderPath_args();
      }

      protected getProjectFolderPath_result getResult(I iface, getProjectFolderPath_args args) throws org.apache.thrift.TException {
        getProjectFolderPath_result result = new getProjectFolderPath_result();
        result.success = iface.getProjectFolderPath();
        return result;
      }
    }

  }

  public static class executeCmd_args implements org.apache.thrift.TBase<executeCmd_args, executeCmd_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeCmd_args");

    private static final org.apache.thrift.protocol.TField CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UNDO_REPORT_HTTP_FIELD_DESC = new org.apache.thrift.protocol.TField("undoReportHttp", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField UNDO_REPORT_HTTP_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("undoReportHttpUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXEC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("exec_type", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField DEL_TEMP_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("delTempFile", org.apache.thrift.protocol.TType.BOOL, (short)6);
    private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeCmd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeCmd_argsTupleSchemeFactory());
    }

    public String cmd; // required
    public long task_id; // required
    public boolean undoReportHttp; // required
    public String undoReportHttpUrl; // required
    public int exec_type; // required
    public boolean delTempFile; // required
    public Extra extra; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CMD((short)1, "cmd"),
      TASK_ID((short)2, "task_id"),
      UNDO_REPORT_HTTP((short)3, "undoReportHttp"),
      UNDO_REPORT_HTTP_URL((short)4, "undoReportHttpUrl"),
      EXEC_TYPE((short)5, "exec_type"),
      DEL_TEMP_FILE((short)6, "delTempFile"),
      EXTRA((short)7, "extra");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CMD
            return CMD;
          case 2: // TASK_ID
            return TASK_ID;
          case 3: // UNDO_REPORT_HTTP
            return UNDO_REPORT_HTTP;
          case 4: // UNDO_REPORT_HTTP_URL
            return UNDO_REPORT_HTTP_URL;
          case 5: // EXEC_TYPE
            return EXEC_TYPE;
          case 6: // DEL_TEMP_FILE
            return DEL_TEMP_FILE;
          case 7: // EXTRA
            return EXTRA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASK_ID_ISSET_ID = 0;
    private static final int __UNDOREPORTHTTP_ISSET_ID = 1;
    private static final int __EXEC_TYPE_ISSET_ID = 2;
    private static final int __DELTEMPFILE_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CMD, new org.apache.thrift.meta_data.FieldMetaData("cmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UNDO_REPORT_HTTP, new org.apache.thrift.meta_data.FieldMetaData("undoReportHttp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNDO_REPORT_HTTP_URL, new org.apache.thrift.meta_data.FieldMetaData("undoReportHttpUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXEC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("exec_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DEL_TEMP_FILE, new org.apache.thrift.meta_data.FieldMetaData("delTempFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Extra.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeCmd_args.class, metaDataMap);
    }

    public executeCmd_args() {
    }

    public executeCmd_args(
      String cmd,
      long task_id,
      boolean undoReportHttp,
      String undoReportHttpUrl,
      int exec_type,
      boolean delTempFile,
      Extra extra)
    {
      this();
      this.cmd = cmd;
      this.task_id = task_id;
      setTask_idIsSet(true);
      this.undoReportHttp = undoReportHttp;
      setUndoReportHttpIsSet(true);
      this.undoReportHttpUrl = undoReportHttpUrl;
      this.exec_type = exec_type;
      setExec_typeIsSet(true);
      this.delTempFile = delTempFile;
      setDelTempFileIsSet(true);
      this.extra = extra;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeCmd_args(executeCmd_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetCmd()) {
        this.cmd = other.cmd;
      }
      this.task_id = other.task_id;
      this.undoReportHttp = other.undoReportHttp;
      if (other.isSetUndoReportHttpUrl()) {
        this.undoReportHttpUrl = other.undoReportHttpUrl;
      }
      this.exec_type = other.exec_type;
      this.delTempFile = other.delTempFile;
      if (other.isSetExtra()) {
        this.extra = new Extra(other.extra);
      }
    }

    public executeCmd_args deepCopy() {
      return new executeCmd_args(this);
    }

    @Override
    public void clear() {
      this.cmd = null;
      setTask_idIsSet(false);
      this.task_id = 0;
      setUndoReportHttpIsSet(false);
      this.undoReportHttp = false;
      this.undoReportHttpUrl = null;
      setExec_typeIsSet(false);
      this.exec_type = 0;
      setDelTempFileIsSet(false);
      this.delTempFile = false;
      this.extra = null;
    }

    public String getCmd() {
      return this.cmd;
    }

    public executeCmd_args setCmd(String cmd) {
      this.cmd = cmd;
      return this;
    }

    public void unsetCmd() {
      this.cmd = null;
    }

    /** Returns true if field cmd is set (has been assigned a value) and false otherwise */
    public boolean isSetCmd() {
      return this.cmd != null;
    }

    public void setCmdIsSet(boolean value) {
      if (!value) {
        this.cmd = null;
      }
    }

    public long getTask_id() {
      return this.task_id;
    }

    public executeCmd_args setTask_id(long task_id) {
      this.task_id = task_id;
      setTask_idIsSet(true);
      return this;
    }

    public void unsetTask_id() {
      __isset_bit_vector.clear(__TASK_ID_ISSET_ID);
    }

    /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTask_id() {
      return __isset_bit_vector.get(__TASK_ID_ISSET_ID);
    }

    public void setTask_idIsSet(boolean value) {
      __isset_bit_vector.set(__TASK_ID_ISSET_ID, value);
    }

    public boolean isUndoReportHttp() {
      return this.undoReportHttp;
    }

    public executeCmd_args setUndoReportHttp(boolean undoReportHttp) {
      this.undoReportHttp = undoReportHttp;
      setUndoReportHttpIsSet(true);
      return this;
    }

    public void unsetUndoReportHttp() {
      __isset_bit_vector.clear(__UNDOREPORTHTTP_ISSET_ID);
    }

    /** Returns true if field undoReportHttp is set (has been assigned a value) and false otherwise */
    public boolean isSetUndoReportHttp() {
      return __isset_bit_vector.get(__UNDOREPORTHTTP_ISSET_ID);
    }

    public void setUndoReportHttpIsSet(boolean value) {
      __isset_bit_vector.set(__UNDOREPORTHTTP_ISSET_ID, value);
    }

    public String getUndoReportHttpUrl() {
      return this.undoReportHttpUrl;
    }

    public executeCmd_args setUndoReportHttpUrl(String undoReportHttpUrl) {
      this.undoReportHttpUrl = undoReportHttpUrl;
      return this;
    }

    public void unsetUndoReportHttpUrl() {
      this.undoReportHttpUrl = null;
    }

    /** Returns true if field undoReportHttpUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetUndoReportHttpUrl() {
      return this.undoReportHttpUrl != null;
    }

    public void setUndoReportHttpUrlIsSet(boolean value) {
      if (!value) {
        this.undoReportHttpUrl = null;
      }
    }

    public int getExec_type() {
      return this.exec_type;
    }

    public executeCmd_args setExec_type(int exec_type) {
      this.exec_type = exec_type;
      setExec_typeIsSet(true);
      return this;
    }

    public void unsetExec_type() {
      __isset_bit_vector.clear(__EXEC_TYPE_ISSET_ID);
    }

    /** Returns true if field exec_type is set (has been assigned a value) and false otherwise */
    public boolean isSetExec_type() {
      return __isset_bit_vector.get(__EXEC_TYPE_ISSET_ID);
    }

    public void setExec_typeIsSet(boolean value) {
      __isset_bit_vector.set(__EXEC_TYPE_ISSET_ID, value);
    }

    public boolean isDelTempFile() {
      return this.delTempFile;
    }

    public executeCmd_args setDelTempFile(boolean delTempFile) {
      this.delTempFile = delTempFile;
      setDelTempFileIsSet(true);
      return this;
    }

    public void unsetDelTempFile() {
      __isset_bit_vector.clear(__DELTEMPFILE_ISSET_ID);
    }

    /** Returns true if field delTempFile is set (has been assigned a value) and false otherwise */
    public boolean isSetDelTempFile() {
      return __isset_bit_vector.get(__DELTEMPFILE_ISSET_ID);
    }

    public void setDelTempFileIsSet(boolean value) {
      __isset_bit_vector.set(__DELTEMPFILE_ISSET_ID, value);
    }

    public Extra getExtra() {
      return this.extra;
    }

    public executeCmd_args setExtra(Extra extra) {
      this.extra = extra;
      return this;
    }

    public void unsetExtra() {
      this.extra = null;
    }

    /** Returns true if field extra is set (has been assigned a value) and false otherwise */
    public boolean isSetExtra() {
      return this.extra != null;
    }

    public void setExtraIsSet(boolean value) {
      if (!value) {
        this.extra = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CMD:
        if (value == null) {
          unsetCmd();
        } else {
          setCmd((String)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          setTask_id((Long)value);
        }
        break;

      case UNDO_REPORT_HTTP:
        if (value == null) {
          unsetUndoReportHttp();
        } else {
          setUndoReportHttp((Boolean)value);
        }
        break;

      case UNDO_REPORT_HTTP_URL:
        if (value == null) {
          unsetUndoReportHttpUrl();
        } else {
          setUndoReportHttpUrl((String)value);
        }
        break;

      case EXEC_TYPE:
        if (value == null) {
          unsetExec_type();
        } else {
          setExec_type((Integer)value);
        }
        break;

      case DEL_TEMP_FILE:
        if (value == null) {
          unsetDelTempFile();
        } else {
          setDelTempFile((Boolean)value);
        }
        break;

      case EXTRA:
        if (value == null) {
          unsetExtra();
        } else {
          setExtra((Extra)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CMD:
        return getCmd();

      case TASK_ID:
        return Long.valueOf(getTask_id());

      case UNDO_REPORT_HTTP:
        return Boolean.valueOf(isUndoReportHttp());

      case UNDO_REPORT_HTTP_URL:
        return getUndoReportHttpUrl();

      case EXEC_TYPE:
        return Integer.valueOf(getExec_type());

      case DEL_TEMP_FILE:
        return Boolean.valueOf(isDelTempFile());

      case EXTRA:
        return getExtra();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CMD:
        return isSetCmd();
      case TASK_ID:
        return isSetTask_id();
      case UNDO_REPORT_HTTP:
        return isSetUndoReportHttp();
      case UNDO_REPORT_HTTP_URL:
        return isSetUndoReportHttpUrl();
      case EXEC_TYPE:
        return isSetExec_type();
      case DEL_TEMP_FILE:
        return isSetDelTempFile();
      case EXTRA:
        return isSetExtra();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeCmd_args)
        return this.equals((executeCmd_args)that);
      return false;
    }

    public boolean equals(executeCmd_args that) {
      if (that == null)
        return false;

      boolean this_present_cmd = true && this.isSetCmd();
      boolean that_present_cmd = true && that.isSetCmd();
      if (this_present_cmd || that_present_cmd) {
        if (!(this_present_cmd && that_present_cmd))
          return false;
        if (!this.cmd.equals(that.cmd))
          return false;
      }

      boolean this_present_task_id = true;
      boolean that_present_task_id = true;
      if (this_present_task_id || that_present_task_id) {
        if (!(this_present_task_id && that_present_task_id))
          return false;
        if (this.task_id != that.task_id)
          return false;
      }

      boolean this_present_undoReportHttp = true;
      boolean that_present_undoReportHttp = true;
      if (this_present_undoReportHttp || that_present_undoReportHttp) {
        if (!(this_present_undoReportHttp && that_present_undoReportHttp))
          return false;
        if (this.undoReportHttp != that.undoReportHttp)
          return false;
      }

      boolean this_present_undoReportHttpUrl = true && this.isSetUndoReportHttpUrl();
      boolean that_present_undoReportHttpUrl = true && that.isSetUndoReportHttpUrl();
      if (this_present_undoReportHttpUrl || that_present_undoReportHttpUrl) {
        if (!(this_present_undoReportHttpUrl && that_present_undoReportHttpUrl))
          return false;
        if (!this.undoReportHttpUrl.equals(that.undoReportHttpUrl))
          return false;
      }

      boolean this_present_exec_type = true;
      boolean that_present_exec_type = true;
      if (this_present_exec_type || that_present_exec_type) {
        if (!(this_present_exec_type && that_present_exec_type))
          return false;
        if (this.exec_type != that.exec_type)
          return false;
      }

      boolean this_present_delTempFile = true;
      boolean that_present_delTempFile = true;
      if (this_present_delTempFile || that_present_delTempFile) {
        if (!(this_present_delTempFile && that_present_delTempFile))
          return false;
        if (this.delTempFile != that.delTempFile)
          return false;
      }

      boolean this_present_extra = true && this.isSetExtra();
      boolean that_present_extra = true && that.isSetExtra();
      if (this_present_extra || that_present_extra) {
        if (!(this_present_extra && that_present_extra))
          return false;
        if (!this.extra.equals(that.extra))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(executeCmd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      executeCmd_args typedOther = (executeCmd_args)other;

      lastComparison = Boolean.valueOf(isSetCmd()).compareTo(typedOther.isSetCmd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCmd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd, typedOther.cmd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(typedOther.isSetTask_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, typedOther.task_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUndoReportHttp()).compareTo(typedOther.isSetUndoReportHttp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUndoReportHttp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.undoReportHttp, typedOther.undoReportHttp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUndoReportHttpUrl()).compareTo(typedOther.isSetUndoReportHttpUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUndoReportHttpUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.undoReportHttpUrl, typedOther.undoReportHttpUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExec_type()).compareTo(typedOther.isSetExec_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExec_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exec_type, typedOther.exec_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDelTempFile()).compareTo(typedOther.isSetDelTempFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelTempFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delTempFile, typedOther.delTempFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExtra()).compareTo(typedOther.isSetExtra());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtra()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, typedOther.extra);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeCmd_args(");
      boolean first = true;

      sb.append("cmd:");
      if (this.cmd == null) {
        sb.append("null");
      } else {
        sb.append(this.cmd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("task_id:");
      sb.append(this.task_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("undoReportHttp:");
      sb.append(this.undoReportHttp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("undoReportHttpUrl:");
      if (this.undoReportHttpUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.undoReportHttpUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exec_type:");
      sb.append(this.exec_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("delTempFile:");
      sb.append(this.delTempFile);
      first = false;
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeCmd_argsStandardSchemeFactory implements SchemeFactory {
      public executeCmd_argsStandardScheme getScheme() {
        return new executeCmd_argsStandardScheme();
      }
    }

    private static class executeCmd_argsStandardScheme extends StandardScheme<executeCmd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeCmd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CMD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cmd = iprot.readString();
                struct.setCmdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.task_id = iprot.readI64();
                struct.setTask_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UNDO_REPORT_HTTP
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.undoReportHttp = iprot.readBool();
                struct.setUndoReportHttpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UNDO_REPORT_HTTP_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.undoReportHttpUrl = iprot.readString();
                struct.setUndoReportHttpUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXEC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.exec_type = iprot.readI32();
                struct.setExec_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DEL_TEMP_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.delTempFile = iprot.readBool();
                struct.setDelTempFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // EXTRA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.extra = new Extra();
                struct.extra.read(iprot);
                struct.setExtraIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeCmd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cmd != null) {
          oprot.writeFieldBegin(CMD_FIELD_DESC);
          oprot.writeString(struct.cmd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.task_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UNDO_REPORT_HTTP_FIELD_DESC);
        oprot.writeBool(struct.undoReportHttp);
        oprot.writeFieldEnd();
        if (struct.undoReportHttpUrl != null) {
          oprot.writeFieldBegin(UNDO_REPORT_HTTP_URL_FIELD_DESC);
          oprot.writeString(struct.undoReportHttpUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EXEC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.exec_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DEL_TEMP_FILE_FIELD_DESC);
        oprot.writeBool(struct.delTempFile);
        oprot.writeFieldEnd();
        if (struct.extra != null) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          struct.extra.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeCmd_argsTupleSchemeFactory implements SchemeFactory {
      public executeCmd_argsTupleScheme getScheme() {
        return new executeCmd_argsTupleScheme();
      }
    }

    private static class executeCmd_argsTupleScheme extends TupleScheme<executeCmd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeCmd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCmd()) {
          optionals.set(0);
        }
        if (struct.isSetTask_id()) {
          optionals.set(1);
        }
        if (struct.isSetUndoReportHttp()) {
          optionals.set(2);
        }
        if (struct.isSetUndoReportHttpUrl()) {
          optionals.set(3);
        }
        if (struct.isSetExec_type()) {
          optionals.set(4);
        }
        if (struct.isSetDelTempFile()) {
          optionals.set(5);
        }
        if (struct.isSetExtra()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetCmd()) {
          oprot.writeString(struct.cmd);
        }
        if (struct.isSetTask_id()) {
          oprot.writeI64(struct.task_id);
        }
        if (struct.isSetUndoReportHttp()) {
          oprot.writeBool(struct.undoReportHttp);
        }
        if (struct.isSetUndoReportHttpUrl()) {
          oprot.writeString(struct.undoReportHttpUrl);
        }
        if (struct.isSetExec_type()) {
          oprot.writeI32(struct.exec_type);
        }
        if (struct.isSetDelTempFile()) {
          oprot.writeBool(struct.delTempFile);
        }
        if (struct.isSetExtra()) {
          struct.extra.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeCmd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.cmd = iprot.readString();
          struct.setCmdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.task_id = iprot.readI64();
          struct.setTask_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.undoReportHttp = iprot.readBool();
          struct.setUndoReportHttpIsSet(true);
        }
        if (incoming.get(3)) {
          struct.undoReportHttpUrl = iprot.readString();
          struct.setUndoReportHttpUrlIsSet(true);
        }
        if (incoming.get(4)) {
          struct.exec_type = iprot.readI32();
          struct.setExec_typeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.delTempFile = iprot.readBool();
          struct.setDelTempFileIsSet(true);
        }
        if (incoming.get(6)) {
          struct.extra = new Extra();
          struct.extra.read(iprot);
          struct.setExtraIsSet(true);
        }
      }
    }

  }

  public static class executeCmd_result implements org.apache.thrift.TBase<executeCmd_result, executeCmd_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeCmd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new executeCmd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new executeCmd_resultTupleSchemeFactory());
    }

    public ExecuteDoneReportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecuteDoneReportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeCmd_result.class, metaDataMap);
    }

    public executeCmd_result() {
    }

    public executeCmd_result(
      ExecuteDoneReportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeCmd_result(executeCmd_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExecuteDoneReportResult(other.success);
      }
    }

    public executeCmd_result deepCopy() {
      return new executeCmd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ExecuteDoneReportResult getSuccess() {
      return this.success;
    }

    public executeCmd_result setSuccess(ExecuteDoneReportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExecuteDoneReportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof executeCmd_result)
        return this.equals((executeCmd_result)that);
      return false;
    }

    public boolean equals(executeCmd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(executeCmd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      executeCmd_result typedOther = (executeCmd_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("executeCmd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeCmd_resultStandardSchemeFactory implements SchemeFactory {
      public executeCmd_resultStandardScheme getScheme() {
        return new executeCmd_resultStandardScheme();
      }
    }

    private static class executeCmd_resultStandardScheme extends StandardScheme<executeCmd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeCmd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExecuteDoneReportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeCmd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeCmd_resultTupleSchemeFactory implements SchemeFactory {
      public executeCmd_resultTupleScheme getScheme() {
        return new executeCmd_resultTupleScheme();
      }
    }

    private static class executeCmd_resultTupleScheme extends TupleScheme<executeCmd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeCmd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeCmd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ExecuteDoneReportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

    private static final org.apache.thrift.protocol.TField UPDATE_SHELL_CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("updateShellCmd", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_argsTupleSchemeFactory());
    }

    public String updateShellCmd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATE_SHELL_CMD((short)1, "updateShellCmd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPDATE_SHELL_CMD
            return UPDATE_SHELL_CMD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATE_SHELL_CMD, new org.apache.thrift.meta_data.FieldMetaData("updateShellCmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
    }

    public update_args() {
    }

    public update_args(
      String updateShellCmd)
    {
      this();
      this.updateShellCmd = updateShellCmd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_args(update_args other) {
      if (other.isSetUpdateShellCmd()) {
        this.updateShellCmd = other.updateShellCmd;
      }
    }

    public update_args deepCopy() {
      return new update_args(this);
    }

    @Override
    public void clear() {
      this.updateShellCmd = null;
    }

    public String getUpdateShellCmd() {
      return this.updateShellCmd;
    }

    public update_args setUpdateShellCmd(String updateShellCmd) {
      this.updateShellCmd = updateShellCmd;
      return this;
    }

    public void unsetUpdateShellCmd() {
      this.updateShellCmd = null;
    }

    /** Returns true if field updateShellCmd is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateShellCmd() {
      return this.updateShellCmd != null;
    }

    public void setUpdateShellCmdIsSet(boolean value) {
      if (!value) {
        this.updateShellCmd = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPDATE_SHELL_CMD:
        if (value == null) {
          unsetUpdateShellCmd();
        } else {
          setUpdateShellCmd((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPDATE_SHELL_CMD:
        return getUpdateShellCmd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPDATE_SHELL_CMD:
        return isSetUpdateShellCmd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_updateShellCmd = true && this.isSetUpdateShellCmd();
      boolean that_present_updateShellCmd = true && that.isSetUpdateShellCmd();
      if (this_present_updateShellCmd || that_present_updateShellCmd) {
        if (!(this_present_updateShellCmd && that_present_updateShellCmd))
          return false;
        if (!this.updateShellCmd.equals(that.updateShellCmd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      update_args typedOther = (update_args)other;

      lastComparison = Boolean.valueOf(isSetUpdateShellCmd()).compareTo(typedOther.isSetUpdateShellCmd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateShellCmd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateShellCmd, typedOther.updateShellCmd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      boolean first = true;

      sb.append("updateShellCmd:");
      if (this.updateShellCmd == null) {
        sb.append("null");
      } else {
        sb.append(this.updateShellCmd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_argsStandardSchemeFactory implements SchemeFactory {
      public update_argsStandardScheme getScheme() {
        return new update_argsStandardScheme();
      }
    }

    private static class update_argsStandardScheme extends StandardScheme<update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATE_SHELL_CMD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.updateShellCmd = iprot.readString();
                struct.setUpdateShellCmdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.updateShellCmd != null) {
          oprot.writeFieldBegin(UPDATE_SHELL_CMD_FIELD_DESC);
          oprot.writeString(struct.updateShellCmd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_argsTupleSchemeFactory implements SchemeFactory {
      public update_argsTupleScheme getScheme() {
        return new update_argsTupleScheme();
      }
    }

    private static class update_argsTupleScheme extends TupleScheme<update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUpdateShellCmd()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUpdateShellCmd()) {
          oprot.writeString(struct.updateShellCmd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.updateShellCmd = iprot.readString();
          struct.setUpdateShellCmdIsSet(true);
        }
      }
    }

  }

  public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
    }

    public update_result() {
    }

    public update_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_result(update_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public update_result deepCopy() {
      return new update_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public update_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      update_result typedOther = (update_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_resultStandardSchemeFactory implements SchemeFactory {
      public update_resultStandardScheme getScheme() {
        return new update_resultStandardScheme();
      }
    }

    private static class update_resultStandardScheme extends StandardScheme<update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_resultTupleSchemeFactory implements SchemeFactory {
      public update_resultTupleScheme getScheme() {
        return new update_resultTupleScheme();
      }
    }

    private static class update_resultTupleScheme extends TupleScheme<update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProjectFolderPath_args implements org.apache.thrift.TBase<getProjectFolderPath_args, getProjectFolderPath_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectFolderPath_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectFolderPath_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectFolderPath_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectFolderPath_args.class, metaDataMap);
    }

    public getProjectFolderPath_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectFolderPath_args(getProjectFolderPath_args other) {
    }

    public getProjectFolderPath_args deepCopy() {
      return new getProjectFolderPath_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectFolderPath_args)
        return this.equals((getProjectFolderPath_args)that);
      return false;
    }

    public boolean equals(getProjectFolderPath_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProjectFolderPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProjectFolderPath_args typedOther = (getProjectFolderPath_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectFolderPath_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectFolderPath_argsStandardSchemeFactory implements SchemeFactory {
      public getProjectFolderPath_argsStandardScheme getScheme() {
        return new getProjectFolderPath_argsStandardScheme();
      }
    }

    private static class getProjectFolderPath_argsStandardScheme extends StandardScheme<getProjectFolderPath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectFolderPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectFolderPath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectFolderPath_argsTupleSchemeFactory implements SchemeFactory {
      public getProjectFolderPath_argsTupleScheme getScheme() {
        return new getProjectFolderPath_argsTupleScheme();
      }
    }

    private static class getProjectFolderPath_argsTupleScheme extends TupleScheme<getProjectFolderPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectFolderPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectFolderPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getProjectFolderPath_result implements org.apache.thrift.TBase<getProjectFolderPath_result, getProjectFolderPath_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectFolderPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectFolderPath_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectFolderPath_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectFolderPath_result.class, metaDataMap);
    }

    public getProjectFolderPath_result() {
    }

    public getProjectFolderPath_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectFolderPath_result(getProjectFolderPath_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProjectFolderPath_result deepCopy() {
      return new getProjectFolderPath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getProjectFolderPath_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectFolderPath_result)
        return this.equals((getProjectFolderPath_result)that);
      return false;
    }

    public boolean equals(getProjectFolderPath_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProjectFolderPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProjectFolderPath_result typedOther = (getProjectFolderPath_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectFolderPath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectFolderPath_resultStandardSchemeFactory implements SchemeFactory {
      public getProjectFolderPath_resultStandardScheme getScheme() {
        return new getProjectFolderPath_resultStandardScheme();
      }
    }

    private static class getProjectFolderPath_resultStandardScheme extends StandardScheme<getProjectFolderPath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectFolderPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectFolderPath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectFolderPath_resultTupleSchemeFactory implements SchemeFactory {
      public getProjectFolderPath_resultTupleScheme getScheme() {
        return new getProjectFolderPath_resultTupleScheme();
      }
    }

    private static class getProjectFolderPath_resultTupleScheme extends TupleScheme<getProjectFolderPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectFolderPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectFolderPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
